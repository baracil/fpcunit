package ${generationPath.basePackageName}.named;
#* @vtlvariable name="quantity" type="net.femtoparsec.units.generator.bean.Quantity" *#
#* @vtlvariable name="generationPath" type="net.femtoparsec.units.generator.GenerationPath" *#
#* @vtlvariable name="quantities" type="net.femtoparsec.units.generator.bean.Quantity[]" *#
#* @vtlvariable name="StringUtils" type="net.femtoparsec.units.generator.StringUtils" *#

/**
!! Automatically generated class. Any direct modifications will be lost during the next generation. To add Quantity/Unit/Measurement , constant or operations
!! Check the "units.xml" file and the Generator class
**/

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import net.femtoparsec.units.api.Measurement;
import net.femtoparsec.units.api.NamedQuantity;
import net.femtoparsec.units.api.Quantity;
import net.femtoparsec.units.api.Unit;
import net.femtoparsec.units.core.NamedQuantityConsumer;
import net.femtoparsec.units.core.NamedQuantityFunction;
import ${generationPath.basePackageName}.named.quantity.*;

public final class Quantities {
#foreach ($quantity in ${quantities})
    public static final ${quantity.quantityName} $StringUtils.humpAndRemove(${quantity.quantityName}, "_QUANTITY") = ${quantity.quantityName}.INSTANCE;
#end

    public static <T> List<T> apply(NamedQuantityFunction<T> function) {
        final List<T> list = new ArrayList<>(44);
        accept(new NamedQuantityConsumer() {
                @Override
                public <Q extends NamedQuantity<M>, M extends Measurement<?>> void accept(Class<Q> quantityType, Q quantity) {
                        list.add(function.apply(quantityType, quantity));
                }
        });
        return list;
    }

    public static void accept(NamedQuantityConsumer consumer) {
        #foreach ($quantity in ${quantities})
            consumer.accept(${quantity.quantityName}.class, $StringUtils.humpAndRemove(${quantity.quantityName}, "_QUANTITY"));
        #end
    }


    public static final Map<String, Quantity> QUANTITIES_BY_NAME = Stream.of(
        #foreach ($quantity in ${quantities})
            #if($foreach.index > 0)
                ,$StringUtils.humpAndRemove(${quantity.quantityName}, "_QUANTITY")
            #else
                $StringUtils.humpAndRemove(${quantity.quantityName}, "_QUANTITY")
            #end
        #end
        ).collect(Collectors.toUnmodifiableMap(Quantity::getName, Function.identity()));
}
