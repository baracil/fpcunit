package ${generationPath.basePackageName}.named.quantity;
#* @vtlvariable name="quantity" type="net.femtoparsec.units.generator.bean.Quantity" *#
#* @vtlvariable name="generationPath" type="net.femtoparsec.units.generator.GenerationPath" *#
#* @vtlvariable name="StringUtils" type="net.femtoparsec.units.generator.StringUtils" *#

/**
!! Automatically generated class. Any direct modifications will be lost during the next generation. To add Quantity/Unit/Measurement , constant or operations
!! Check the "units.xml" file and the Generator class
**/

import java.util.List;
import java.util.Optional;

import net.femtoparsec.units.core.MeasurementParser;
import net.femtoparsec.units.api.NamedQuantity;
import net.femtoparsec.units.core.QuantityBase;
import net.femtoparsec.units.core.QuantityUnits;
import ${generationPath.basePackageName}.named.Units;
import ${generationPath.basePackageName}.named.unit.${quantity.unitName};
import ${generationPath.basePackageName}.named.measurement.${quantity.measurementName};

public final class ${quantity.quantityName} extends QuantityBase<${quantity.quantityName},${quantity.unitName}> implements NamedQuantity<${quantity.measurementName}> {

    public static final ${quantity.quantityName} INSTANCE = new ${quantity.quantityName}();

    @Override
    protected QuantityUnits<${quantity.quantityName}, ${quantity.unitName}> getQuantityUnits() {
        return Units.$StringUtils.humpAndRemove(${quantity.quantityName}, "_QUANTITY")_UNITS;
    }

    private ${quantity.quantityName}() {
        super("${quantity.dimension.encoded}");
    }

    @Override
    protected ${quantity.quantityName} getThis() {
        return this;
    }

    @Override
    public ${quantity.measurementName} createWithSI(double siValue) {
        return new ${quantity.measurementName}(siValue,Units.${quantity.siUnit.instanceName});
    }

    @Override
    public String getName() {
        return "${quantity.name}";
    }

    @Override
    public Class<${quantity.measurementName}> getMeasurementType() {
        return ${quantity.measurementName}.class;
    }


@Override
    protected List<${quantity.unitName}> getUnits() {
        return List.of(
#foreach ($unit in ${quantity.units})
            Units.${unit.instanceName},
#end
            Units.${quantity.siUnit.instanceName}
        );
    }


    @Override
    public ${quantity.measurementName} parseMeasurement(String measurementAsString) {
        return safeParseMeasurement(measurementAsString)
            .orElseThrow(() -> new IllegalArgumentException("Invalid measurement " + measurementAsString));
    }

    @Override
    public Optional<${quantity.measurementName}> safeParseMeasurement(String measurementAsString) {
        return MeasurementParser.parse(measurementAsString)
              .flatMap(
              p -> this.findUnit(p.unit())
               .map(u -> new ${quantity.measurementName}(p.value(),u)));
    }

}
